using System.Security.Cryptography;
using System.Text;

namespace SequenceMediaDownloader.Common;

public class Commons
{
    public const string AutoGenerated = "@__AutoGenerated__"; // Length = 18

    /// <summary>
    /// Return a random string as Id, from a range of alphanumeric characters and special characters.
    /// If <paramref name="prefix"/> is provided, append it at the beginning of the randomized string.
    /// </summary>
    /// <spec>
    /// @requires
    ///     randomLength > 0
    /// @effects
    ///     ...
    /// </spec>
    /// <param name="randomLength">length of the  randomized string</param>
    /// <param name="prefix">a prefix string to be appended at the beginning</param>
    /// <returns>a random string as Id</returns>
    public static string RandomId(int randomLength, string prefix = null)
    {
        if (randomLength <= 0) return string.Empty;

        using var rngCsp = RandomNumberGenerator.Create();
        const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:'\",.<>?/`";

        var data = new byte[randomLength];
        rngCsp.GetBytes(data);

        // return prefix +  new string(data.Select(b => characters[b % characters.Length]).ToArray());

        var result = prefix != null ? new StringBuilder(prefix, randomLength + prefix.Length) : new StringBuilder(randomLength);

        foreach (var b in data)
        {
            result.Append(characters[b % characters.Length]);
        }

        return result.ToString();
    }
}